{
	"$schema": "../tmlanguage.json",
	
	"name": "GM",

	"scopeName": "source.gm",
	"patterns": [
		{
			"include": "#brackets"
		}
	],

	"repository": {
		"brackets": {
			"patterns": [
				{
					"include": "#gmlang"
				},
				{
					"include": "#round-brackets"
				},
				{
					"include": "#square-brackets"
				},
				{
					"include": "#curly-brackets"
				},
				{
					"include": "#lock-symbols"
				},
				{
					"include": "#write-out"
				}
			]
		},
		"gmlang": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#invalids"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#variables"
				}
			]
		},
		"round-brackets": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.sequence.begin.gm"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.sequence.end.gm"
				}
			},
			"name": "meta.structure.sequence.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"square-brackets": {
			"begin": "(?<!^|\\s|,)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.subscript.begin.gm"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.subscript.end.gm"
				}
			},
			"name": "meta.structure.subscript.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"curly-brackets": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.set.begin.gm"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.set.end.gm"
				}
			},
			"name": "meta.structure.set.gm",
			"patterns": [
				{
					"include": "#brackets"
				},
				{
					"comment": "I don't know whether I will use this symbol later",
					"match": "\\|",
					"name": "punctuation.separator.gm"
				}
			]
		},
		"lock-symbols": {
			"begin": "&",
			"beginCaptures": {
				"0": {
					"name": "punctuation.lock.symbol.begin.gm"
				}
			},
			"end": "&",
			"endCaptures": {
				"0": {
					"name": "punctuation.lock.symbol.end.gm"
				}
			},
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"write-out": {
			"begin": "(@)\\b([^\\s,;:]+(?:\\.[^\\s,;:]+)*)(,)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.locator.gm"
				},
				"2": {
					"name": "markup.underline.link.gm"
				},
				"3": {
					"name": "punctuation.separator.gm"
				}
			},
			"end": "■",
			"endCaptures": {
				"0": {
					"name": "keyword.control.terminator.gm"
				}
			},
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"variables": {
			"begin": "([∀∃!])(?![:\\s])",
			"beginCaptures": {
				"1": {
					"name": "keyword.quantifier.gm"
				}
			},
			"end": "(?<!\\s):",
			"endCaptures": {
				"0": {
					"name": "keyword.control.define.gm"
				}
			},
			"contentName": "variable.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"include": "#numeric"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#special-name"
				},
				{
					"name": "constant.other.color.gm",
					"match": "#(?:(?:[0-9a-fA-F]{3}){1,2}|(?:[0-9a-fA-F]{4}){1,2})\\b"
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"name": "constant.numeric.gm",
					"match": "\\b(?!\\.)(?:0|π)\\b(?!:)"
				},
				{
					"name": "constant.numeric.dec.gm",
					"match": "\\b[\\-\\+]?(?:[Dd][Ee][Cc]\\.)?[1-9][0-9]*(?:\\.(?:e|[0-9]+))?\\b(?!:)"
				},
				{
					"name": "constant.numeric.bin.gm",
					"match": "\\b[\\-\\+]?[Bb][Ii][Nn]\\.1[01]*(?:\\.(?:e|[01]+))?\\b"
				},
				{
					"name": "constant.numeric.oct.gm",
					"match": "\\b[\\-\\+]?[Oo][Cc][Tt]\\.[1-7][0-7]*(?:\\.(?:e|[0-7]+))?\\b"
				},
				{
					"name": "constant.numeric.hex.gm",
					"match": "\\b[\\-\\+]?[Hh][Ee][Xx]\\.[1-9a-fA-F][0-9a-fA-F]*(?:\\.(?:e|[0-9a-fA-F]+))?\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"include": "#logical-functions"
				}
			]
		},
		"special-name": {
			"match": "%(.+)%",
			"captures": {
				"0": {
					"name": "constant.name.gm"
				},
				"1": {
					"name": "string.name.gm"
				}
			},
			"patterns": []
		},
		"logical-functions": {
			"patterns": [
				{
					"comment": "I cannot find a perfect way to deal with this question up to now",
					"match": "[∀∃!](?![^:]*:)",
					"name": "support.function.logical.gm"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "punctuation.delimiter.gm",
					"match": " "
				},
				{
					"name": "punctuation.delimiter.gm",
					"match": "^\t+"
				},
				{
					"name": "punctuation.separator.gm",
					"match": ","
				},
				{
					"name": "keyword.control.flow.gm",
					"match": "(?:⇒|⇔|⇐)(?!:)"
				},
				{
					"match": ":",
					"name": "keyword.control.define.gm"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#escape-strings"
				},
				{
					"include": "#pre-strings"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#block-comments"
				},
				{
					"include": "#line-comments"
				}
			]
		},
		"invalids": {
			"patterns": [
				{
					"name": "invalid.illegal.define.gm",
					"match": "(?<=^|\\s|:):"
				},
				{
					"name": "invalid.illegal.quantifier.gm",
					"match": "\\w+[∀∃!]"
				},
				{
					"name": "invalid.deprecated.triple.gm",
					"match": "```",
					"comment": "it can be only used in the comments. In fact you acn define it."
				},
				{
					"name": "invalid.deprecated.tab.gm",
					"match": "[^\t\n]\t+",
					"comment": "Tab should always at the start of new lines"
				}
			]
		},
		"block-comments": {
			"begin": "(?<=^|[,\\(\\{])\\s*\\[",
			"end": "\\]",
			"name": "comment.block.gm",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"comments": "#better-comments"
				},
				{
					"begin": "(?<!`)```(?!`)",
					"end": "(?<!`)```(?!`)",
					"name": "string.quoted.triple.gm",
					"patterns": [
						{
							"include": "#brackets"
						},
						{
							"match": "````",
							"name": "invalid.illegal.gm"
						}
					]
				}
			]
		},
		"line-comments": {
			"patterns": [
				{
					"match": "(?i);(?!\\s*(?:\\+|\\*|\\?|\\!|todo|note|wait|warn)).*",
					"name": "comment.line.pure.gm"
				},
				{
					"include": "#better-comments"
				}
			]
		},
		"better-comments": {
			"patterns": [
				{
					"match": "(?i);\\s*(?:\\+|todo).*",
					"name": "comment.line.todo.gm"
				},
				{
					"match": "(?i);\\s*(?:\\*|note).*",
					"name": "comment.line.note.gm"
				},
				{
					"match": "(?i);\\s*(?:\\?|wait).*",
					"name": "comment.line.wait.gm",
					"comment": "I didn't determined now"
				},
				{
					"match": "(?i);\\s*(?:\\!|warn).*",
					"name": "comment.line.warn.gm"
				}
			]
		},
		"escape-strings": {
			"name": "string.quoted.escape.gm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gm",
					"match": "\\\\."
				}
			]
		},
		"pre-strings": {
			"comment": "no escape_character in it, which means it cannot includes '`'",
			"name": "string.quoted.pre.gm",
			"begin": "`(?!``)",
			"end": "`(?!``)",
			"patterns": [
				{
					"name": "constant.character.escape.gm",
					"match": "\\\\."
				}
			]
		}
	}
}