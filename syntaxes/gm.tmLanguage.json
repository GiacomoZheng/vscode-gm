{
	"$schema": "../tmlanguage.json",

	"name": "GM",
	
	"scopeName": "source.gm",
	"patterns": [
		{
			"description": "the ':' at the first line of the file is legal",
			"match": "\\A:",
			"name": "keyword.control.define.file.gm"
		},
		{
			"include": "#gmlang"
		}
	],

	"repository": {
		"gmlang": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#invalids"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#temporaries"
				},
				{
					"include": "#strings"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#block-comments"
				},
				{
					"include": "#line-comments"
				},
				{
					"Comment": "I'll change it later",
					"include": "#doc-comments"
				}
			],
			"repository": {
				"block-comments": {
					"begin": "(?<=^|\\A|[,■({])\\s*(\\[)",
					"Comment": "I want to delete ^ to get an single version",
					"beginCaptures": {
						"1": {
							"name": "punctuation.define.comment.block.begin.gm"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.define.comment.block.end.gm"
						}
					},
					"name": "comment.block.gm",
					"patterns": [
						{
							"include": "#strings"
						},
						{
							"include": "#fenced_code_block_gm"
						},
						{
							"include": "#fenced_code_block_unknow"
						},
						{
							"include": "#better-comments"
						}
					]
				},
				"line-comments": {
					"begin": "(;)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.define.comment.line.gm"
						}
					},
					"end": "(?=$|(?<=\\s);)",
					"name": "comment.line.gm",
					"patterns": [
						{
							"include": "#better-comments"
						}
					]
				},
				"_doc-comments": {
					"Comment": "undetermined",
					"Source": "java",
					"begin": "^\\s*(\\[\\*\\*)(?!\\])",
					"beginCaptures": {
						"1": {
							"name": "punctuation.define.comment.doc.begin.gm"
						}
					},
					"end": "(?:\\*[^\\]]*)?(\\*\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.define.comment.doc.end.gm"
						}
					},
					"name": "comment.doc.gm",
					"patterns": [
						{
							"_wait": "text.html.markdown"
						},
						{
							"include": "#strings"
						},
						{
							"begin": "^\\s*\\*(?![^\\]]*\\*?\\])",
							"end": "(?<!\\\\)$",
							"patterns": [
								{
									"include": "#better-comments"
								},
								{
									"Comment": "author|deprecated|return|since|version |see|serial",
									"include": "#informations"
								}
							]
						}
					]
				},
				"better-comments": {
					"patterns": [
						{
							"match": "(?x)(?<=^|\\G|;)\\s*(?i: ((?:\\+|todo).*?) | ((?:\\*|note).*?) | ((?:\\?|wait).*?) | ((?:\\!|warn).*?))(?=$|(?<=\\s);)",
							"captures": {
								"1": {
									"name": "comment.todo.gm"
								},
								"2": {
									"name": "comment.note.gm"
								},
								"3": {
									"name": "comment.wait.gm"
								},
								"4": {
									"name": "comment.warn.gm"
								}
							}
						}
					]
				},
				"fenced_code_block_gm": {
					"begin": "(```)(?i:gm)?\\s+",
					"beginCaptures": {
						"1": {
							"name": "punctuation.define.embedded.begin.gm"
						}
					},
					"end": "(```)",
					"endCaptures": {
						"1": {
							"name": "punctuation.define.embedded.end.gm"
						}
					},
					"contentName": "meta.embedded.block.gm",
					"patterns": [
						{
							"include": "#gmlang"
						}
					]
				},
				"fenced_code_block_unknow": {
					"begin": "(```)[^\\s]+",
					"beginCaptures": {
						"1": {
							"name": "punctuation.define.embedded.begin.gm"
						}
					},
					"end": "(```)",
					"endCaptures": {
						"1": {
							"name": "punctuation.define.embedded.end.gm"
						}
					},
					"contentName": "meta.embedded.block.language",
					"patterns": []
				},
				"_informations": {
					"Comment": "undetermined, I may move this part into a new language",
					"patterns": [
						{
							"match": "\\G\\s*(@(?:version|since))\\s+([0-9][1-9]*(?:\\.[0-9][1-9]*)*)?.*$",
							"captures": {
								"1": {
									"name": "keyword.other.comment.doc.gm"
								},
								"2": {
									"name": "constant.numeric.generate.gm"
								}
							}
						},
						{
							"match": "\\G\\s*(@author)\\s+@?(\\w*).*$",
							"captures": {
								"1": {
									"name": "keyword.other.comment.doc.gm"
								},
								"2": {
									"name": "string.other.name.gm"
								}
							}
						},
						{
							"match": "\\G\\s*(@(?:return|[eE]xception|[tT]hrows|[eE]rror))\\s+(.*)$",
							"captures": {
								"1": {
									"name": "keyword.other.comment.doc.gm"
								},
								"2": {
									"name": "meta.embedded.line.language"
								}
							}
						},
						{
							"match": "\\G\\s*(@(deprecated))\\s+",
							"captures": {
								"1": {
									"name": "keyword.other.comment.doc.gm"
								},
								"2": {
									"name": "invalid.deprecated.gm"
								}
							}
						},
						{
							"match": "\\G\\s*(@param(?:eter)?)\\s+(\\S+)",
							"captures": {
								"1": {
									"name": "keyword.other.comment.doc.gm"
								},
								"2": {
									"name": "variable.parameter.gm"
								}
							}
						}
					]
				}
			}
		},
		"brackets": {
			"patterns": [
				{
					"include": "#round-brackets"
				},
				{
					"include": "#square-brackets"
				},
				{
					"include": "#curly-brackets"
				},
				{
					"include": "#lock-keywords"
				},
				{
					"Comment": "the name is undetermined now",
					"include": "#locator"
				}
			],
			"repository": {
				"round-brackets": {
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.define.sequence.begin.gm"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.define.sequence.end.gm"
						}
					},
					"name": "meta.structure.sequence.gm",
					"patterns": [
						{
							"include": "#gmlang"
						}
					]
				},
				"square-brackets": {
					"begin": "(?<!^|[,■({])\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.define.subscript.begin.gm"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.define.subscript.end.gm"
						}
					},
					"name": "meta.structure.subscript.gm",
					"patterns": [
						{
							"include": "#gmlang"
						}
					]
				},
				"curly-brackets": {
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.define.set.begin.gm"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.define.set.end.gm"
						}
					},
					"name": "meta.structure.set.gm",
					"patterns": [
						{
							"include": "#gmlang"
						},
						{
							"Comment": "I don't know whether I will use this symbol later",
							"match": "\\|",
							"name": "punctuation.separator.gm"
						}
					]
				},
				"lock-keywords": {
					"Comment": "make the keyword 'locked', do not return directly",
					"begin": "&",
					"beginCaptures": {
						"0": {
							"name": "punctuation.lock_symbol.begin.gm"
						}
					},
					"end": "&|(?:(?<!\\\\)$)",
					"endCaptures": {
						"0": {
							"name": "punctuation.lock_symbol.end.gm"
						}
					},
					"patterns": [
						{
							"include": "#gmlang"
						}
					]
				},
				"locator": {
					"begin": "(@)([^\\s,;:@]+)(?:\\.[^\\s,;:@]+)*(,)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.locator.gm"
						},
						"2": {
							"name": "constant.other.location.gm"
						},
						"3": {
							"name": "punctuation.separator.gm"
						}
					},
					"end": "■",
					"endCaptures": {
						"0": {
							"name": "keyword.control.terminator.gm"
						}
					},
					"patterns": [
						{
							"include": "#gmlang"
						}
					]
				}
			}
		},
		"invalids": {
			"patterns": [
				{
					"name": "invalid.illegal.define.gm",
					"match": "(?<=^|\\s|:):",
					"Comment": "except the : at the beginning of the file"
				},
				{
					"name": "invalid.illegal.quantifier.gm",
					"match": "\\w[∀∃!¬]"
				},
				{
					"name": "invalid.illegal.package.gm",
					"match": "(?<=^|,|\\.)\\s*\\."
				},
				{
					"name": "invalid.deprecated.triple.gm",
					"match": "```",
					"Comment": "it can be only used in the comments. In fact you can define it."
				},
				{
					"name": "invalid.deprecated.tab.gm",
					"match": "[^\t$]\t+",
					"Comment": "Tabs should be always at the beginning of new lines"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"Comment": "the general keywords",
					"include": "#keywords"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#attributes"
				},
				{
					"name": "constant.rgb-value.gm",
					"match": "#(?:(?:[0-9a-fA-F]{3}){1,2}|(?:[0-9a-fA-F]{4}){1,2})\\b"
				}
			],
			"repository": {
				"keywords": {
					"patterns": [
						{
							"name": "keyword.delimiter.gm",
							"match": " |^\t+(?!:)"
						},
						{
							"match": "(?x)(?:(,) | (⇒|⇔|⇐) | (:) | ([∈∋ ⊆⊇ ⊂⊃ =≠ ≤≥ <> ~≌]) | ([+\\- *×\\/ ^√ ∧∨ ∪∩ ∘]))(?!:)",
							"captures": {
								"1": {
									"name": "punctuation.separator.gm"
								},
								"2": {
									"name": "keyword.control.flow.gm"
								},
								"3": {
									"name": "keyword.control.define.gm"
								},
								"4": {
									"name": "keyword.relator.gm"
								},
								"5": {
									"name": "keyword.operator.gm"
								}
							}
						}
					]
				},
				"functions": {
					"patterns": [
						{
							"Comment": "I cannot find a perfect way to deal with this question up to now",
							"match": "[∀∃!¬]+(?![^:]*:|\\.)",
							"name": "entity.name.function.logical.gm"
						}
					]
				},
				"attributes": {
					"Comment": "add one more invalid situation",
					"Source": "java",
					"patterns": [
						{
							"match": "[^\\s,:;(){}\\[\\]&.|\"`∀∃!¬]+(?=\\s*\\.\\s*[^\\s,:;(){}\\[\\]&.|\"`]+)",
							"name": "constant.other.location.gm"
						},
						{
							"match": "(\\.)\\s*([^\\s,:;(){}\\[\\]&.|]+)",
							"captures": {
								"1": {
									"name": "punctuation.package.gm"
								},
								"2": {
									"name": "constant.other.location.gm",
									"patterns": [
										{
											"include": "#keywords"
										}
									]
								}
							}
						}
					]
				}
			}
		},
		"temporaries": {
			"begin": "([∀∃!¬]+)(?![:.])",
			"beginCaptures": {
				"1": {
					"Comment": "not a keyword",
					"name": "keyword.quantifier.gm"
				}
			},
			"end": "(?<!\\s):|\n",
			"endCaptures": {
				"0": {
					"name": "keyword.control.define.gm"
				}
			},
			"Comment-contentName": "not a variable",
			"contentName": "variable.temporary.define.gm",
			"patterns": [
				{
					"include": "#gmlang"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#line-strings"
				},
				{
					"include": "#pre-strings"
				},
				{
					"include": "#regexp-strings"
				}
			],
			"repository": {
				"line-strings": {
					"Comment": "copy from the python source file",
					"name": "string.line.gm",
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.define.string.line.begin.gm"
						}
					},
					"end": "\"|(?<!\\\\)\n",
					"endCaptures": {
						"0": {
							"name": "punctuation.define.string.line.end.gm"
						}
					},
					"patterns": [
						{
							"name": "constant.character.escape.gm",
							"match": "\\\\[\\w\"]"
						}
					]
				},
				"pre-strings": {
					"Comment": "no escape_character in it, which means it cannot includes '`'",
					"begin": "(?<!`)`(?!`)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.define.string.pre.begin.gm"
						}
					},
					"end": "(?<!`)`(?!`)",
					"endCaptures": {
						"0": {
							"name": "punctuation.define.string.pre.end.gm"
						}
					},
					"name": "string.pre.gm",
					"patterns": []
				},
				"regexp-strings": {
					"Comment": "undetermined",
					"begin": "[rR](\")",
					"beginCapture": {
						"0": {
							"name": "keyword.other.regexp.gm"
						},
						"1": {
							"name": "punctuation.define.string.regexp.begin.gm"
						}
					},
					"Comment-end": "I promise the xX but I don't recommend it",
					"end": "(\")[pPxX]|(?<!\\\\)\n",
					"endCapture": {
						"1": {
							"name": "punctuation.define.string.regexp.end.gm"
						}
					},
					"contentName": "string.regexp.gm",
					"patterns": [
						{
							"include": "source.regexp.gm"
						}
					]
				}
			}
		}
	}
}
