{
	"$schema": "../tmlanguage.json",
	
	"name": "GM",
	"foldingStartMarker": "(\\(\\s*$|\\{\\s*$)",
	"foldingStopMarker": "(^\\s*\\)|^\\s*\\})",

	"firstLineMatch": ":\\s*.+",
	"scopeName": "source.gm",
	"patterns": [
		{
			"include": "#brackets"
		}
	],

	"repository": {
		"brackets": {
			"patterns": [
				{
					"include": "#gmlang"
				},
				{
					"include": "#round-bracket"
				},
				{
					"include": "#square-bracket"
				},
				{
					"include": "#curly-bracket"
				},
				{
					"include": "#write-out"
				}
			]
		},
		"gmlang": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#invalids"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#variables"
				}
			]
		},
		"round-bracket": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.sequence.begin.gm"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.sequence.end.gm"
				}
			},
			"name": "meta.structure.sequence.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"square-bracket": {
			"begin": "(?<!^|\\s|,)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.subscript.begin.gm"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.subscript.end.gm"
				}
			},
			"name": "meta.structure.subscript.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"curly-bracket": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.set.begin.gm"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.set.end.gm"
				}
			},
			"name": "meta.structure.set.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"write-out": {
			"begin": "(@)\\b([^\\s,;:]+(?:\\.[^\\s,;:]+)*)(,)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.locator.gm"
				},
				"2": {
					"name": "markup.underline.link.gm"
				},
				"3": {
					"name": "punctuation.separator.gm"
				}
			},
			"end": "■",
			"endCaptures": {
				"0": {
					"name": "keyword.control.terminator.gm"
				}
			},
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"variables": {
			"begin": "[∀∃!](?![:\\s])",
			"beginCaptures": {
				"0": {
					"name": "keyword.quantifier.gm"
				}
			},
			"end": "(?<!\\s):",
			"endCaptures": {
				"0": {
					"name": "keyword.control.define.gm"
				}
			},
			"contentName": "variable.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"include": "#numeric"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#special-name"
				},
				{
					"name": "constant.other.color.gm",
					"comment": "colors",
					"match": "#(?:(?:[0-9a-fA-F]{3}){1,2}|(?:[0-9a-fA-F]{4}){1,2})\\b"
				}
			]
		},
		"numeric": {
			"patterns": [
				{
					"name": "constant.numeric.gm",
					"match": "\\b(?!\\.)(?:0|π)\\b(?!:)"
				},
				{
					"name": "constant.numeric.dec.gm",
					"match": "\\b[\\-\\+]?(?:[Dd][Ee][Cc]\\.)?[1-9][0-9]*(?:\\.(?:e|[0-9]+))?\\b(?!:)"
				},
				{
					"name": "constant.numeric.bin.gm",
					"match": "\\b[\\-\\+]?[Bb][Ii][Nn]\\.1[01]*(?:\\.(?:e|[01]+))?\\b"
				},
				{
					"name": "constant.numeric.oct.gm",
					"match": "\\b[\\-\\+]?[Oo][Cc][Tt]\\.[1-7][0-7]*(?:\\.(?:e|[0-7]+))?\\b"
				},
				{
					"name": "constant.numeric.hex.gm",
					"match": "\\b[\\-\\+]?[Hh][Ee][Xx]\\.[1-9a-fA-F][0-9a-fA-F]*(?:\\.(?:e|[0-9a-fA-F]+))?\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"include": "#logical-functions"
				}
			]
		},
		"special-name": {
			"match": "%(.+)%",
			"captures": {
				"0": {
					"name": "constant.name.gm"
				},
				"1": {
					"name": "string.name.gm"
				}
			},
			"patterns": []
		},
		"logical-functions": {
			"match": "([∀∃!?])([^\\[\\(:])?(?![^:]*:)",
			"captures": {
				"1": {
					"name": "support.function.logical.gm"
				},
				"2": {
					"name": "invalid.illegal.logical.gm"
				}
			},
			"patterns": []
		},
		"keywords": {
			"patterns": [
				{
					"name": "punctuation.delimiter.gm",
					"match": "\\s"
				},
				{
					"name": "punctuation.separator.gm",
					"match": ","
				},
				{
					"name": "keyword.control.flow.gm",
					"match": "⇒|⇔|⇐"
				},
				{
					"match": ":",
					"name": "keyword.control.define.gm"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#double-strings"
				},
				{
					"include": "#quoted"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#block-comments"
				},
				{
					"match": ";.*",
					"name": "comment.line.gm"
				}
			]
		},
		"invalids": {
			"patterns": [
				{
					"name": "invalid.illegal.define.gm",
					"match": "(?<=^|\\s|:):"
				},
				{
					"match": "\\w+[∀∃!]",
					"name": "invalid.illegal.quantifier.gm"
				}
			]
		},
		"block-comments": {
			"begin": "(?<=^|,)\\s*\\[",
			"end": "\\]",
			"name": "comment.block.gm",
			"patterns": [
				{
					"include": "#strings"
				}
			]
		},
		"double-strings": {
			"name": "string.quoted.double.gm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gm",
					"match": "\\\\."
				}
			]
		},
		"quoted": {
			"begin": "```",
			"end": "```",
			"name": "string.quoted.triple.gm",
			"patterns": [
				{
					"include": "#brackets"
				}
			]
		}
	}
}