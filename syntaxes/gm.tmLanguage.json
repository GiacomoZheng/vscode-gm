{
	"$schema": "../tmlanguage.json",
	
	"name": "GM",

	"scopeName": "source.gm",
	"patterns": [
		{
			"include": "#gmlang"
		}
	],

	"repository": {
		"gmlang": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#invalids"
				},
				{
					"comment": "includes keywords",
					"include": "#constants"
				},
				{
					"include": "#temporaries"
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"include": "#round-brackets"
				},
				{
					"include": "#square-brackets"
				},
				{
					"include": "#curly-brackets"
				},
				{
					"include": "#lock-symbols"
				},
				{
					"comment": "the name is undetermined now",
					"include": "#locator"
				}
			]
		},
		"round-brackets": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.sequence.begin.gm"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.sequence.end.gm"
				}
			},
			"name": "meta.structure.sequence.gm",
			"patterns": [
				{
					"include": "#gmlang"
				}
			]
		},
		"square-brackets": {
			"begin": "(?<!^|,)\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.define.subscript.begin.gm"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.subscript.end.gm"
				}
			},
			"name": "meta.structure.subscript.gm",
			"patterns": [
				{
					"include": "#gmlang"
				}
			]
		},
		"curly-brackets": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.define.set.begin.gm"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.define.set.end.gm"
				}
			},
			"name": "meta.structure.set.gm",
			"patterns": [
				{
					"include": "#gmlang"
				},
				{
					"comment": "I don't know whether I will use this symbol later",
					"match": "\\|",
					"name": "punctuation.separator.gm"
				}
			]
		},
		"lock-symbols": {
			"comment": "I don't know whether I would use it later",
			"begin": "&",
			"beginCaptures": {
				"0": {
					"name": "punctuation.lock_symbol.begin.gm"
				}
			},
			"end": "&|(?:(?<!\\\\)\n)",
			"endCaptures": {
				"0": {
					"name": "punctuation.lock_symbol.end.gm"
				}
			},
			"patterns": [
				{
					"include": "#gmlang"
				}
			]
		},
		"locator": {
			"begin": "(@)\\b([^\\s,;:]+)(?:\\.[^\\s,;:]+)*(,)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.locator.gm"
				},
				"2": {
					"name": "constant.other.location.gm"
				},
				"3": {
					"name": "punctuation.separator.gm"
				}
			},
			"end": "■",
			"endCaptures": {
				"0": {
					"name": "keyword.control.terminator.gm"
				}
			},
			"patterns": [
				{
					"include": "#gmlang"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#numeric"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#attributions"
				},
				{
					"name": "constant.other.color.gm",
					"match": "#(?:(?:[0-9a-fA-F]{3}){1,2}|(?:[0-9a-fA-F]{4}){1,2})\\b"
				}
			]
		},
		"temporaries": {
			"comment-begin": "undetermined whether the \\s should be forbidden after ∀∃!",
			"begin": "([∀∃!])(?![:.])",
			"beginCaptures": {
				"1": {
					"comment": "not a keyword",
					"name": "keyword.quantifier.gm"
				}
			},
			"end": "(?<!\\s):",
			"endCaptures": {
				"0": {
					"name": "keyword.control.define.gm"
				}
			},
			"comment-contentName": "not a varibale",
			"contentName": "variable.temporary.define.gm",
			"patterns": [
				{
					"include": "#gmlang"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"comment": "I cannot find a perfect way to deal with this question up to now",
					"match": "[∀∃!](?![^:]*:)",
					"name": "function.logical.gm"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "delimiter.gm",
					"match": " |^\t+"
				},
				{
					"name": "punctuation.separator.gm",
					"match": ","
				},
				{
					"name": "keyword.control.flow.gm",
					"match": "(?:⇒|⇔|⇐)(?!:)"
				},
				{
					"name": "keyword.control.define.gm",
					"match": ":"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#line-strings"
				},
				{
					"include": "#pre-strings"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#block-comments"
				},
				{
					"include": "#line-comments"
				}
			]
		},
		"block-comments": {
			"begin": "(?<=^|[,({])\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.comment.block.begin.gm"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.comment.block.end.gm"
				}
			},
			"name": "comment.block.gm",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#better-comments"
				},
				{
					"begin": "(?<!`)```(?!`)",
					"end": "(?<!`)```(?!`)",
					"name": "string.quoted.triple.gm",
					"patterns": [
						{
							"include": "#gmlang"
						},
						{
							"match": "````",
							"name": "invalid.illegal.gm"
						}
					]
				}
			]
		},
		"line-comments": {
			"begin": "(;)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.comment.line.gm"
				}
			},
			"end": "\n",
			"name": "comment.line.gm",
			"patterns": [
				{
					"include": "#better-comments"
				}
			]
		},
		"doc-comments": {
			"comment": "be directly adapted from java",
			"begin": "^\\s*(/\\*\\*)(?!/)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.java"
				}
			},
			"end": "\\*/",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.java"
				}
			},
			"name": "comment.block.documentation.java",
			"patterns": [
				{
					"include": "#better-comments"
				},
				{
					"match": "@(author|deprecated|return|see|serial|since|version)\\b",
					"name": "keyword.other.documentation.doc.java"
				},
				{
					"match": "(@param)\\s+(\\S+)",
					"captures": {
						"1": {
							"name": "keyword.other.documentation.doc.java"
						},
						"2": {
							"name": "variable.parameter.java"
						}
					}
				},
				{
					"match": "(@(?:exception|throws))\\s+(\\S+)",
					"captures": {
						"1": {
							"name": "keyword.other.documentation.doc.java"
						},
						"2": {
							"name": "entity.name.type.class.java"
						}
					}
				},
				{
					"match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*}",
					"captures": {
						"1": {
							"name": "keyword.other.documentation.doc.java"
						},
						"2": {
							"name": "entity.name.type.class.java"
						},
						"3": {
							"name": "variable.parameter.java"
						}
					}
				}
			]
		},
		"better-comments": {
			"patterns": [
				{
					"match": "(?i)(?<=;|^)(\\s*(?:\\+|todo).*?)($|(?<=\\s);)",
					"captures": {
						"1": {
							"name": "comment.todo.gm"
						},
						"2": {
							"name": "punctuation.comment.gm"
						}
					}
				},
				{
					"match": "(?i)(?<=;|^)(\\s*(?:\\*|note).*?)($|(?<=\\s);)",
					"captures": {
						"1": {
							"name": "comment.note.gm"
						},
						"2": {
							"name": "punctuation.comment.gm"
						}
					}
				},
				{
					"match": "(?i)(?<=;|^)(\\s*(?:\\?|wait).*?)($|(?<=\\s);)",
					"captures": {
						"1": {
							"name": "comment.wait.gm"
						},
						"2": {
							"name": "punctuation.comment.gm"
						}
					}
				},
				{
					"match": "(?i)(?<=;|^)(\\s*(?:\\!|warn).*?)($|(?<=\\s);)",
					"captures": {
						"1": {
							"name": "comment.warn.gm"
						},
						"2": {
							"name": "punctuation.comment.gm"
						}
					}
				}
			]
		},
		"line-strings": {
			"comment": "copy from the python source file",
			"name": "string.quoted.line.gm",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.string.quoted.line.begin"
				}
			},
			"end": "\"|(?:(?<!\\\\)\n)",
			"endCaptures": {
				"0": {
					"name": "punctuation.string.quoted.line.end"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.gm",
					"match": "\\\\."
				}
			]
		},
		"pre-strings": {
			"comment": "no escape_character in it, which means it cannot includes '`'",
			"name": "string.quoted.pre.gm",
			"begin": "`(?!``)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.string.quoted.pre.begin"
				}
			},
			"end": "`(?!``)",
			"endCaptures": {
				"0": {
					"name": "punctuation.string.quoted.pre.end"
				}
			},
			"patterns": []
		},
		"attributions": {
			"comment": "be directly adapted from java",
			"patterns": [
				{
					"match": "\\b[^\\s,:;(){}\\[\\]&.|]+(?=\\s*\\.\\s*[^\\s,:;(){}\\[\\]&.|]+)",
					"name": "constant.other.location.gm"
				},
				{
					"comment": "add an invalid situation",
					"match": "(\\.)\\s*([^\\s,:;(){}\\[\\]&.|]+)",
					"captures": {
						"1": {
							"name": "punctuation.package.gm"
						},
						"2": {
							"name": "constant.other.location.gm"
						}
					}
				}
			]
		},
		"invalids": {
			"patterns": [
				{
					"name": "invalid.illegal.define.gm",
					"match": "(?<=^|\\s|:):"
				},
				{
					"name": "invalid.illegal.quantifier.gm",
					"match": "\\w+[∀∃!]"
				},
				{
					"match": "(?<=^|,|\\.)\\s*(\\.)",
					"captures": {
						"1": {
							"name": "invalid.illegal.package.gm"
						}
					}
				},
				{
					"name": "invalid.deprecated.triple.gm",
					"match": "```",
					"comment": "it can be only used in the comments. In fact you can define it."
				},
				{
					"name": "invalid.deprecated.tab.gm",
					"match": "[^\t\n]\t+",
					"comment": "Tabs should be always at the beginning of new lines"
				}
			]
		}
	}
}